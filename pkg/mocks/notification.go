// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go
//
// Generated by this command:
//
//	mockgen -source=notification.go -package=mocks -destination=mocks/notification.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
	isgomock struct{}
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// SendPush mocks base method.
func (m *MockNotification) SendPush(ctx context.Context, to, body string, priority int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPush", ctx, to, body, priority)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPush indicates an expected call of SendPush.
func (mr *MockNotificationMockRecorder) SendPush(ctx, to, body, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPush", reflect.TypeOf((*MockNotification)(nil).SendPush), ctx, to, body, priority)
}

// SendToMany mocks base method.
func (m *MockNotification) SendToMany(ctx context.Context, tos []string, body string, priority int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToMany", ctx, tos, body, priority)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToMany indicates an expected call of SendToMany.
func (mr *MockNotificationMockRecorder) SendToMany(ctx, tos, body, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToMany", reflect.TypeOf((*MockNotification)(nil).SendToMany), ctx, tos, body, priority)
}

// SendToTopic mocks base method.
func (m *MockNotification) SendToTopic(ctx context.Context, topic string, data map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToTopic", ctx, topic, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToTopic indicates an expected call of SendToTopic.
func (mr *MockNotificationMockRecorder) SendToTopic(ctx, topic, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToTopic", reflect.TypeOf((*MockNotification)(nil).SendToTopic), ctx, topic, data)
}
