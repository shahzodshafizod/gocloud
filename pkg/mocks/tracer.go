// Code generated by MockGen. DO NOT EDIT.
// Source: tracer.go
//
// Generated by this command:
//
//	mockgen -source=tracer.go -package=mocks -destination=mocks/tracer.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pkg "github.com/shahzodshafizod/gocloud/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
	isgomock struct{}
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTracer) Extract(ctx context.Context, carrier pkg.TextMapCarrier) pkg.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx, carrier)
	ret0, _ := ret[0].(pkg.Span)
	return ret0
}

// Extract indicates an expected call of Extract.
func (mr *MockTracerMockRecorder) Extract(ctx, carrier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTracer)(nil).Extract), ctx, carrier)
}

// Inject mocks base method.
func (m *MockTracer) Inject(ctx context.Context, carrier pkg.TextMapCarrier) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inject", ctx, carrier)
}

// Inject indicates an expected call of Inject.
func (mr *MockTracerMockRecorder) Inject(ctx, carrier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockTracer)(nil).Inject), ctx, carrier)
}

// Shutdown mocks base method.
func (m *MockTracer) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTracerMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTracer)(nil).Shutdown), ctx)
}

// StartFromContext mocks base method.
func (m *MockTracer) StartFromContext(ctx context.Context, name string) (context.Context, pkg.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFromContext", ctx, name)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(pkg.Span)
	return ret0, ret1
}

// StartFromContext indicates an expected call of StartFromContext.
func (mr *MockTracerMockRecorder) StartFromContext(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromContext", reflect.TypeOf((*MockTracer)(nil).StartFromContext), ctx, name)
}

// StartFromSpan mocks base method.
func (m *MockTracer) StartFromSpan(ctx context.Context, span pkg.Span, name string) (context.Context, pkg.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFromSpan", ctx, span, name)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(pkg.Span)
	return ret0, ret1
}

// StartFromSpan indicates an expected call of StartFromSpan.
func (mr *MockTracerMockRecorder) StartFromSpan(ctx, span, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromSpan", reflect.TypeOf((*MockTracer)(nil).StartFromSpan), ctx, span, name)
}

// MockSpan is a mock of Span interface.
type MockSpan struct {
	ctrl     *gomock.Controller
	recorder *MockSpanMockRecorder
	isgomock struct{}
}

// MockSpanMockRecorder is the mock recorder for MockSpan.
type MockSpanMockRecorder struct {
	mock *MockSpan
}

// NewMockSpan creates a new mock instance.
func NewMockSpan(ctrl *gomock.Controller) *MockSpan {
	mock := &MockSpan{ctrl: ctrl}
	mock.recorder = &MockSpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpan) EXPECT() *MockSpanMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSpan) Context(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSpanMockRecorder) Context(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSpan)(nil).Context), ctx)
}

// End mocks base method.
func (m *MockSpan) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockSpanMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockSpan)(nil).End))
}

// RecordError mocks base method.
func (m *MockSpan) RecordError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordError", err)
}

// RecordError indicates an expected call of RecordError.
func (mr *MockSpanMockRecorder) RecordError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordError", reflect.TypeOf((*MockSpan)(nil).RecordError), err)
}

// SetAttributes mocks base method.
func (m *MockSpan) SetAttributes(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAttributes", key, value)
}

// SetAttributes indicates an expected call of SetAttributes.
func (mr *MockSpanMockRecorder) SetAttributes(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributes", reflect.TypeOf((*MockSpan)(nil).SetAttributes), key, value)
}

// MockTextMapCarrier is a mock of TextMapCarrier interface.
type MockTextMapCarrier struct {
	ctrl     *gomock.Controller
	recorder *MockTextMapCarrierMockRecorder
	isgomock struct{}
}

// MockTextMapCarrierMockRecorder is the mock recorder for MockTextMapCarrier.
type MockTextMapCarrierMockRecorder struct {
	mock *MockTextMapCarrier
}

// NewMockTextMapCarrier creates a new mock instance.
func NewMockTextMapCarrier(ctrl *gomock.Controller) *MockTextMapCarrier {
	mock := &MockTextMapCarrier{ctrl: ctrl}
	mock.recorder = &MockTextMapCarrierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextMapCarrier) EXPECT() *MockTextMapCarrierMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTextMapCarrier) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockTextMapCarrierMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTextMapCarrier)(nil).Get), key)
}

// Keys mocks base method.
func (m *MockTextMapCarrier) Keys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockTextMapCarrierMockRecorder) Keys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockTextMapCarrier)(nil).Keys))
}

// Set mocks base method.
func (m *MockTextMapCarrier) Set(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockTextMapCarrierMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTextMapCarrier)(nil).Set), key, value)
}
