// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -package=mocks -destination=mocks/cache.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCache) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacheMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCache)(nil).Del), ctx, key)
}

// GetString mocks base method.
func (m *MockCache) GetString(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockCacheMockRecorder) GetString(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockCache)(nil).GetString), ctx, key)
}

// GetStruct mocks base method.
func (m *MockCache) GetStruct(ctx context.Context, key string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStruct", ctx, key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStruct indicates an expected call of GetStruct.
func (mr *MockCacheMockRecorder) GetStruct(ctx, key, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStruct", reflect.TypeOf((*MockCache)(nil).GetStruct), ctx, key, v)
}

// SaveString mocks base method.
func (m *MockCache) SaveString(ctx context.Context, key, value string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveString", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveString indicates an expected call of SaveString.
func (mr *MockCacheMockRecorder) SaveString(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveString", reflect.TypeOf((*MockCache)(nil).SaveString), ctx, key, value, expiration)
}

// SaveStruct mocks base method.
func (m *MockCache) SaveStruct(ctx context.Context, key string, v any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveStruct", ctx, key, v, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveStruct indicates an expected call of SaveStruct.
func (mr *MockCacheMockRecorder) SaveStruct(ctx, key, v, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStruct", reflect.TypeOf((*MockCache)(nil).SaveStruct), ctx, key, v, expiration)
}
