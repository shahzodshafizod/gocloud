// Code generated by MockGen. DO NOT EDIT.
// Source: nosql.go
//
// Generated by this command:
//
//	mockgen -source=nosql.go -package=mocks -destination=mocks/nosql.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pkg "github.com/shahzodshafizod/gocloud/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockNoSQL is a mock of NoSQL interface.
type MockNoSQL struct {
	ctrl     *gomock.Controller
	recorder *MockNoSQLMockRecorder
	isgomock struct{}
}

// MockNoSQLMockRecorder is the mock recorder for MockNoSQL.
type MockNoSQLMockRecorder struct {
	mock *MockNoSQL
}

// NewMockNoSQL creates a new mock instance.
func NewMockNoSQL(ctrl *gomock.Controller) *MockNoSQL {
	mock := &MockNoSQL{ctrl: ctrl}
	mock.recorder = &MockNoSQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoSQL) EXPECT() *MockNoSQLMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockNoSQL) GetItem(ctx context.Context, table string, keys pkg.Map) (pkg.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, table, keys)
	ret0, _ := ret[0].(pkg.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockNoSQLMockRecorder) GetItem(ctx, table, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockNoSQL)(nil).GetItem), ctx, table, keys)
}

// GetItems mocks base method.
func (m *MockNoSQL) GetItems(ctx context.Context, table string, filter pkg.Map) ([]pkg.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, table, filter)
	ret0, _ := ret[0].([]pkg.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockNoSQLMockRecorder) GetItems(ctx, table, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockNoSQL)(nil).GetItems), ctx, table, filter)
}

// Insert mocks base method.
func (m *MockNoSQL) Insert(ctx context.Context, table string, item pkg.Map) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, table, item)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockNoSQLMockRecorder) Insert(ctx, table, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockNoSQL)(nil).Insert), ctx, table, item)
}

// Update mocks base method.
func (m *MockNoSQL) Update(ctx context.Context, table string, filter, update pkg.Map) (pkg.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, table, filter, update)
	ret0, _ := ret[0].(pkg.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNoSQLMockRecorder) Update(ctx, table, filter, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoSQL)(nil).Update), ctx, table, filter, update)
}
