// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: internal/protos/partners.proto

package partners

import (
	context "context"
	products "github.com/shahzodshafizod/gocloud/internal/products"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartnersClient is the client API for Partners service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnersClient interface {
	GetPartnerProducts(ctx context.Context, in *products.GetAllRequest, opts ...grpc.CallOption) (*products.GetAllResponse, error)
	CheckPartnerProducts(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type partnersClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnersClient(cc grpc.ClientConnInterface) PartnersClient {
	return &partnersClient{cc}
}

func (c *partnersClient) GetPartnerProducts(ctx context.Context, in *products.GetAllRequest, opts ...grpc.CallOption) (*products.GetAllResponse, error) {
	out := new(products.GetAllResponse)
	err := c.cc.Invoke(ctx, "/Partners/GetPartnerProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnersClient) CheckPartnerProducts(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/Partners/CheckPartnerProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnersServer is the server API for Partners service.
// All implementations must embed UnimplementedPartnersServer
// for forward compatibility
type PartnersServer interface {
	GetPartnerProducts(context.Context, *products.GetAllRequest) (*products.GetAllResponse, error)
	CheckPartnerProducts(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedPartnersServer()
}

// UnimplementedPartnersServer must be embedded to have forward compatible implementations.
type UnimplementedPartnersServer struct {
}

func (UnimplementedPartnersServer) GetPartnerProducts(context.Context, *products.GetAllRequest) (*products.GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerProducts not implemented")
}
func (UnimplementedPartnersServer) CheckPartnerProducts(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPartnerProducts not implemented")
}
func (UnimplementedPartnersServer) mustEmbedUnimplementedPartnersServer() {}

// UnsafePartnersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnersServer will
// result in compilation errors.
type UnsafePartnersServer interface {
	mustEmbedUnimplementedPartnersServer()
}

func RegisterPartnersServer(s grpc.ServiceRegistrar, srv PartnersServer) {
	s.RegisterService(&Partners_ServiceDesc, srv)
}

func _Partners_GetPartnerProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersServer).GetPartnerProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Partners/GetPartnerProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersServer).GetPartnerProducts(ctx, req.(*products.GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Partners_CheckPartnerProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnersServer).CheckPartnerProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Partners/CheckPartnerProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnersServer).CheckPartnerProducts(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Partners_ServiceDesc is the grpc.ServiceDesc for Partners service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Partners_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Partners",
	HandlerType: (*PartnersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartnerProducts",
			Handler:    _Partners_GetPartnerProducts_Handler,
		},
		{
			MethodName: "CheckPartnerProducts",
			Handler:    _Partners_CheckPartnerProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/partners.proto",
}
