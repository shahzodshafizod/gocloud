// Code generated by MockGen. DO NOT EDIT.
// Source: internal/partners/partners_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/partners/partners_grpc.pb.go -destination=internal/partners/mocks/partners_grpc.pb.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	partners "github.com/shahzodshafizod/gocloud/internal/partners"
	products "github.com/shahzodshafizod/gocloud/internal/products"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPartnersClient is a mock of PartnersClient interface.
type MockPartnersClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartnersClientMockRecorder
	isgomock struct{}
}

// MockPartnersClientMockRecorder is the mock recorder for MockPartnersClient.
type MockPartnersClientMockRecorder struct {
	mock *MockPartnersClient
}

// NewMockPartnersClient creates a new mock instance.
func NewMockPartnersClient(ctrl *gomock.Controller) *MockPartnersClient {
	mock := &MockPartnersClient{ctrl: ctrl}
	mock.recorder = &MockPartnersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnersClient) EXPECT() *MockPartnersClientMockRecorder {
	return m.recorder
}

// CheckPartnerProducts mocks base method.
func (m *MockPartnersClient) CheckPartnerProducts(ctx context.Context, in *partners.CheckRequest, opts ...grpc.CallOption) (*partners.CheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPartnerProducts", varargs...)
	ret0, _ := ret[0].(*partners.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPartnerProducts indicates an expected call of CheckPartnerProducts.
func (mr *MockPartnersClientMockRecorder) CheckPartnerProducts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPartnerProducts", reflect.TypeOf((*MockPartnersClient)(nil).CheckPartnerProducts), varargs...)
}

// GetPartnerProducts mocks base method.
func (m *MockPartnersClient) GetPartnerProducts(ctx context.Context, in *products.GetAllRequest, opts ...grpc.CallOption) (*products.GetAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartnerProducts", varargs...)
	ret0, _ := ret[0].(*products.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerProducts indicates an expected call of GetPartnerProducts.
func (mr *MockPartnersClientMockRecorder) GetPartnerProducts(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerProducts", reflect.TypeOf((*MockPartnersClient)(nil).GetPartnerProducts), varargs...)
}

// MockPartnersServer is a mock of PartnersServer interface.
type MockPartnersServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartnersServerMockRecorder
	isgomock struct{}
}

// MockPartnersServerMockRecorder is the mock recorder for MockPartnersServer.
type MockPartnersServerMockRecorder struct {
	mock *MockPartnersServer
}

// NewMockPartnersServer creates a new mock instance.
func NewMockPartnersServer(ctrl *gomock.Controller) *MockPartnersServer {
	mock := &MockPartnersServer{ctrl: ctrl}
	mock.recorder = &MockPartnersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnersServer) EXPECT() *MockPartnersServerMockRecorder {
	return m.recorder
}

// CheckPartnerProducts mocks base method.
func (m *MockPartnersServer) CheckPartnerProducts(arg0 context.Context, arg1 *partners.CheckRequest) (*partners.CheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPartnerProducts", arg0, arg1)
	ret0, _ := ret[0].(*partners.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPartnerProducts indicates an expected call of CheckPartnerProducts.
func (mr *MockPartnersServerMockRecorder) CheckPartnerProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPartnerProducts", reflect.TypeOf((*MockPartnersServer)(nil).CheckPartnerProducts), arg0, arg1)
}

// GetPartnerProducts mocks base method.
func (m *MockPartnersServer) GetPartnerProducts(arg0 context.Context, arg1 *products.GetAllRequest) (*products.GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerProducts", arg0, arg1)
	ret0, _ := ret[0].(*products.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerProducts indicates an expected call of GetPartnerProducts.
func (mr *MockPartnersServerMockRecorder) GetPartnerProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerProducts", reflect.TypeOf((*MockPartnersServer)(nil).GetPartnerProducts), arg0, arg1)
}

// mustEmbedUnimplementedPartnersServer mocks base method.
func (m *MockPartnersServer) mustEmbedUnimplementedPartnersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartnersServer")
}

// mustEmbedUnimplementedPartnersServer indicates an expected call of mustEmbedUnimplementedPartnersServer.
func (mr *MockPartnersServerMockRecorder) mustEmbedUnimplementedPartnersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartnersServer", reflect.TypeOf((*MockPartnersServer)(nil).mustEmbedUnimplementedPartnersServer))
}

// MockUnsafePartnersServer is a mock of UnsafePartnersServer interface.
type MockUnsafePartnersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePartnersServerMockRecorder
	isgomock struct{}
}

// MockUnsafePartnersServerMockRecorder is the mock recorder for MockUnsafePartnersServer.
type MockUnsafePartnersServerMockRecorder struct {
	mock *MockUnsafePartnersServer
}

// NewMockUnsafePartnersServer creates a new mock instance.
func NewMockUnsafePartnersServer(ctrl *gomock.Controller) *MockUnsafePartnersServer {
	mock := &MockUnsafePartnersServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePartnersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePartnersServer) EXPECT() *MockUnsafePartnersServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPartnersServer mocks base method.
func (m *MockUnsafePartnersServer) mustEmbedUnimplementedPartnersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartnersServer")
}

// mustEmbedUnimplementedPartnersServer indicates an expected call of mustEmbedUnimplementedPartnersServer.
func (mr *MockUnsafePartnersServerMockRecorder) mustEmbedUnimplementedPartnersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartnersServer", reflect.TypeOf((*MockUnsafePartnersServer)(nil).mustEmbedUnimplementedPartnersServer))
}
